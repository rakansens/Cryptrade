'use client'

import { motion } from 'framer-motion'
import { useState, useRef, useEffect } from 'react'
import { Button } from '@/components/ui/button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { MessageSquare, Minimize2, Maximize2, X, List } from 'lucide-react'
import ChatPanel from './ChatPanel'
import ChatSidebar from './ChatSidebar'
import { useChat } from '@/store/chat.store'
import { useChartActions, useDrawingActions, useChartStore, useChartStoreBase } from '@/store/chart.store'
import type { DrawingData, DrawingPoint, DrawTrendlineEventDetail } from '@/types/ui-events.types'

interface FloatingChatPanelProps {
  isVisible: boolean
  onToggleVisibility: () => void
}

export default function FloatingChatPanel({ isVisible, onToggleVisibility }: FloatingChatPanelProps) {
  const [isMinimized, setIsMinimized] = useState(false)
  const [activeTab, setActiveTab] = useState('chat')
  const [position, setPosition] = useState({ x: 20, y: 100 })
  const [size, setSize] = useState({ width: 400, height: 600 })
  const constraintsRef = useRef(null)
  
  // Chart store actions
  const { setSymbol, setTimeframe, setIndicatorEnabled } = useChartActions()
  const { addDrawing } = useDrawingActions()

  const handleMinimize = () => {
    setIsMinimized(!isMinimized)
  }

  // UI操作と自動描画のイベントハンドラ
  useEffect(() => {
    // 開発環境でデバッグ用にwindowに露出
    if (typeof window !== 'undefined' && process.env.NODE_ENV === 'development') {
      interface WindowWithChartStore extends Window {
        chartStore?: typeof useChartStoreBase;
      }
      (window as WindowWithChartStore).chartStore = useChartStoreBase; // Development only
      console.log('[FloatingChatPanel] chartStore exposed to window');
    }
    
    console.log('[Global Debug] Event listener registered for draw:trendline')
    // 通貨変更
    const onSymbolChange = (e: Event) => {
      const detail = (e as CustomEvent).detail
      if (detail?.symbol) {
        setSymbol(detail.symbol)
        console.log('[FloatingChatPanel] Symbol changed to:', detail.symbol)
      }
    }

    // 時間足変更
    const onTimeframeChange = (e: Event) => {
      const detail = (e as CustomEvent).detail
      if (detail?.timeframe) {
        setTimeframe(detail.timeframe)
        console.log('[FloatingChatPanel] Timeframe changed to:', detail.timeframe)
      }
    }

    // インジケーター表示切替
    const onIndicatorControl = (e: Event) => {
      const detail = (e as CustomEvent).detail
      if (detail?.indicator && detail.enabled !== undefined) {
        setIndicatorEnabled(detail.indicator, detail.enabled)
        console.log('[FloatingChatPanel] Indicator toggled:', detail.indicator, detail.enabled)
      }
    }

    // トレンドライン描画（単一または複数対応）
    const onDrawTrendline = (e: Event) => {
      const detail = (e as CustomEvent).detail
      console.log('[FloatingChatPanel] draw:trendline event received:', detail)
      
      // 複数描画の場合の処理
      if (detail?.multiple && Array.isArray(detail.drawings)) {
        console.log('[FloatingChatPanel] Multiple drawings requested:', detail.drawings.length)
        
        detail.drawings.forEach((drawingData: DrawingData, index: number) => {
          if (drawingData?.points && Array.isArray(drawingData.points) && drawingData.points.length >= 2) {
            const normalizedPoints = drawingData.points.map((p: DrawingPoint) => ({
              time: Math.floor(p.time / 1000),
              value: p.price || p.value
            }))
            
            const drawing = {
              id: drawingData.id || `trend-${Date.now()}-${index}`,
              type: 'trendline' as const,
              points: normalizedPoints,
              style: drawingData.style || {
                color: '#00e676',
                lineWidth: 2,
                lineStyle: 'solid' as const,
                showLabels: true,
              },
              visible: true,
              interactive: false,
              metadata: {
                index,
                total: detail.drawings.length,
                description: drawingData.description,
                autoGenerated: drawingData.autoGenerated || false,
              }
            }
            
            // 順次追加（描画のちらつき防止のため少し遅延）
            setTimeout(() => {
              addDrawing(drawing)
              console.log(`[FloatingChatPanel] Drawing ${index + 1}/${detail.drawings.length} added`)
            }, index * 50)
          }
        })
        
        console.log('[FloatingChatPanel] Multiple trendlines processing completed')
        return
      }
      
      // 単一描画の場合（既存のロジック）
      if (detail?.points && Array.isArray(detail.points) && detail.points.length >= 2) {
        const normalizedPoints = detail.points.map((p: DrawingPoint) => {
          if (typeof p.price !== 'number' || typeof p.time !== 'number') {
            console.warn('[FloatingChatPanel] Invalid point data:', p)
          }
          return {
            time: Math.floor(p.time / 1000),
            value: p.price || p.value
          }
        })
        
        const drawing = {
          id: detail.id || `trend-${Date.now()}`,
          type: 'trendline' as const,
          points: normalizedPoints,
          style: detail.style || {
            color: '#00e676',
            lineWidth: 2,
            lineStyle: 'solid' as const,
            showLabels: true,
          },
          visible: true,
          interactive: false,
          metadata: detail.metadata || {}
        }
        
        console.log('[FloatingChatPanel] Adding single drawing to store:', drawing)
        addDrawing(drawing)
        console.log('[FloatingChatPanel] Single trendline drawn successfully')
      } else {
        console.warn('[FloatingChatPanel] Invalid trendline data:', detail)
      }
    }

    // フィボナッチ描画（拡張例）
    const onDrawFibonacci = (e: Event) => {
      const detail = (e as CustomEvent).detail
      if (detail?.points && Array.isArray(detail.points) && detail.points.length >= 2) {
        // lightweight-chartsは時間を秒単位で期待するため、ms→秒に変換
        // また、price と time のみを抽出（x/y座標は除外）
        // lightweight-chartsではvalue/timeキーを使用
        const normalizedPoints = detail.points.map((p: DrawingPoint) => {
          // 入力データの検証
          if (typeof p.price !== 'number' || typeof p.time !== 'number') {
            console.warn('[FloatingChatPanel] Invalid fibonacci point data:', p)
          }
          return {
            time: Math.floor(p.time / 1000), // ms → 秒に変換
            value: p.price // price → value に変換（lightweight-charts標準）
          }
        })
        
        const drawing = {
          id: `fib-${Date.now()}`,
          type: 'fibonacci' as const,
          points: normalizedPoints,
          style: detail.style || {
            color: '#ff9800',
            lineWidth: 1,
            lineStyle: 'solid' as const,
            showLabels: true,
          },
          visible: true,
          interactive: false,
        }
        addDrawing(drawing)
        console.log('[FloatingChatPanel] Fibonacci drawn:', drawing)
      }
    }

    // チャートフィット
    const onChartFit = (e: Event) => {
      // チャートフィット機能をトリガー
      // 実際のチャートコンポーネントでこのイベントをリッスンして fitContent() を呼び出す
      console.log('[FloatingChatPanel] Chart fit requested')
      
      // チャートコンポーネントへのイベント転送
      const chartEvent = new CustomEvent('chart:requestFitContent', {
        detail: { source: 'FloatingChatPanel' }
      })
      window.dispatchEvent(chartEvent)
    }

    // チャート描画開始（インタラクティブモード）
    const onChartStartDrawing = (e: Event) => {
      const detail = (e as CustomEvent).detail
      console.log('[FloatingChatPanel] Chart start drawing:', detail)
      
      // タイプに応じて適切な描画モードを設定
      if (detail?.type === 'trendline' && !detail.points) {
        // インタラクティブモードの場合はユーザーにクリックを促す
        console.log('[FloatingChatPanel] Interactive trendline mode - user needs to click points')
      }
    }

    // イベントリスナー登録
    window.addEventListener('ui:changeSymbol', onSymbolChange)
    window.addEventListener('ui:changeTimeframe', onTimeframeChange)
    window.addEventListener('ui:toggleIndicator', onIndicatorControl)
    window.addEventListener('draw:trendline', onDrawTrendline)
    window.addEventListener('draw:fibonacci', onDrawFibonacci)
    window.addEventListener('chart:fitContent', onChartFit)
    window.addEventListener('chart:startDrawing', onChartStartDrawing)

    return () => {
      // クリーンアップ
      window.removeEventListener('ui:changeSymbol', onSymbolChange)
      window.removeEventListener('ui:changeTimeframe', onTimeframeChange)
      window.removeEventListener('ui:toggleIndicator', onIndicatorControl)
      window.removeEventListener('draw:trendline', onDrawTrendline)
      window.removeEventListener('draw:fibonacci', onDrawFibonacci)
      window.removeEventListener('chart:fitContent', onChartFit)
      window.removeEventListener('chart:startDrawing', onChartStartDrawing)
    }
  }, [setSymbol, setTimeframe, setIndicatorEnabled, addDrawing])

  if (!isVisible) {
    return (
      <div className="fixed bottom-6 left-6 z-50">
        <Button
          onClick={onToggleVisibility}
          className="bg-green-500 hover:bg-green-600 text-black rounded-full w-14 h-14 shadow-lg"
          size="sm"
        >
          <MessageSquare className="w-6 h-6" />
        </Button>
      </div>
    )
  }

  return (
    <div ref={constraintsRef} className="fixed inset-0 pointer-events-none z-40">
      <motion.div
        drag
        dragConstraints={constraintsRef}
        dragElastic={0}
        initial={{ x: position.x, y: position.y }}
        onDragEnd={(_, info) => {
          setPosition({
            x: position.x + info.offset.x,
            y: position.y + info.offset.y
          })
        }}
        className="absolute pointer-events-auto"
        style={{
          width: isMinimized ? 300 : size.width,
          height: isMinimized ? 50 : size.height
        }}
      >
        <div className="bg-black border border-gray-700 rounded-lg shadow-2xl overflow-hidden">
          {/* Header Bar */}
          <div 
            className="flex items-center justify-between p-3 bg-gray-900 border-b border-gray-700 cursor-move select-none"
          >
            <div className="flex items-center gap-2">
              <div className="w-6 h-6 rounded-full bg-gradient-to-br from-green-400 to-green-600 flex items-center justify-center text-black font-bold text-xs">
                D
              </div>
              <span className="text-white text-sm font-medium">AIアシスタント</span>
            </div>
            
            <div className="flex items-center gap-1">
              <Button
                variant="ghost"
                size="sm"
                onClick={handleMinimize}
                className="h-7 w-7 p-0 hover:bg-gray-800 text-gray-400 hover:text-white"
              >
                {isMinimized ? <Maximize2 className="w-3 h-3" /> : <Minimize2 className="w-3 h-3" />}
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={onToggleVisibility}
                className="h-7 w-7 p-0 hover:bg-gray-800 text-gray-400 hover:text-red-400"
              >
                <X className="w-3 h-3" />
              </Button>
            </div>
          </div>

          {/* Chat Content */}
          {!isMinimized && (
            <div 
              className="h-full"
              style={{ height: size.height - 50 }}
            >
              <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full flex flex-col">
                <TabsList className="grid w-full grid-cols-2 bg-gray-800 border-b border-gray-700 rounded-none flex-shrink-0">
                  <TabsTrigger value="conversations" className="text-xs data-[state=active]:bg-gray-700 data-[state=active]:text-white">
                    <List className="w-3 h-3 mr-1" />
                    会話リスト
                  </TabsTrigger>
                  <TabsTrigger value="chat" className="text-xs data-[state=active]:bg-gray-700 data-[state=active]:text-white">
                    <MessageSquare className="w-3 h-3 mr-1" />
                    チャット
                  </TabsTrigger>
                </TabsList>
                
                <TabsContent value="conversations" className="flex-1 min-h-0 m-0 overflow-hidden">
                  <div className="h-full overflow-hidden">
                    <ChatSidebar onSessionSelect={() => setActiveTab('chat')} />
                  </div>
                </TabsContent>
                
                <TabsContent value="chat" className="flex-1 min-h-0 m-0 overflow-hidden">
                  <div className="h-full overflow-hidden">
                    <ChatPanel />
                  </div>
                </TabsContent>
              </Tabs>
            </div>
          )}
        </div>

        {/* Resize Handle */}
        {!isMinimized && (
          <motion.div
            className="absolute bottom-0 right-0 w-4 h-4 cursor-se-resize"
            drag
            dragConstraints={{ left: 0, top: 0, right: 0, bottom: 0 }}
            onDrag={(_, info) => {
              const newWidth = Math.max(300, size.width + info.delta.x)
              const newHeight = Math.max(400, size.height + info.delta.y)
              setSize({ width: newWidth, height: newHeight })
            }}
          >
            <div className="w-full h-full bg-gray-600 opacity-50 hover:opacity-100 transition-opacity">
              <div className="absolute bottom-1 right-1 w-2 h-2">
                <div className="w-full h-0.5 bg-gray-400 mb-0.5"></div>
                <div className="w-full h-0.5 bg-gray-400"></div>
              </div>
            </div>
          </motion.div>
        )}
      </motion.div>
    </div>
  )
}