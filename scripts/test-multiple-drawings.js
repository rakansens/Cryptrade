#!/usr/bin/env node

/**
 * 複数描画機能のテストスクリプト
 */

const API_URL = 'http://localhost:3000/api/ai/chat';

async function testMultipleDrawings() {
  // Dynamic import for node-fetch
  const fetch = (await import('node-fetch')).default;
  
  const testCases = [
    {
      query: "5本のトレンドラインを引いて",
      description: "数字指定での複数描画"
    },
    {
      query: "三本のトレンドラインを描画",
      description: "日本語数詞での複数描画"
    },
    {
      query: "いくつかトレンドラインを引いて",
      description: "曖昧な表現（デフォルト3本）"
    },
    {
      query: "たくさんのトレンドラインを表示",
      description: "多数表現（デフォルト5本）"
    },
    {
      query: "BTCの1時間足で3本のサポートラインを引いて",
      description: "複合操作（銘柄+時間足+複数描画）"
    }
  ];

  for (const test of testCases) {
    console.log(`\n${'='.repeat(60)}`);
    console.log(`🧪 Test: ${test.description}`);
    console.log(`📝 Query: "${test.query}"`);
    console.log(`${'='.repeat(60)}`);
    
    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: test.query,
          sessionId: 'test-session',
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error(`\n❌ HTTP error! status: ${response.status}`);
        console.error(`Error details: ${errorText}`);
        continue;
      }

      const data = await response.json();
      
      console.log('\n📊 Result:');
      console.log(`💬 Response: ${data.message}`);
      console.log(`🎯 Selected Agent: ${data.selectedAgent}`);
      console.log(`🔍 Intent: ${data.analysis?.intent} (confidence: ${data.analysis?.confidence})`);
      
      // Check execution data for operations
      if (data.execution && data.data) {
        console.log(`\n🔧 Execution Data:`);
        console.log(`- Success: ${data.execution.success}`);
        console.log(`- Execution Time: ${data.execution.executionTime}ms`);
        
        if (data.data.operations && data.data.operations.length > 0) {
          console.log(`\n📋 Operations (${data.data.operations.length}):`);
          
          data.data.operations.forEach((op, index) => {
            console.log(`\n  Operation ${index + 1}:`);
            console.log(`  - Type: ${op.type}`);
            console.log(`  - Action: ${op.action}`);
            console.log(`  - Description: ${op.description}`);
            
            if (op.parameters?.drawings) {
              console.log(`  - Multiple Drawings: ${op.parameters.drawings.length} items`);
              op.parameters.drawings.forEach((drawing, idx) => {
                console.log(`    Drawing ${idx + 1}:`);
                console.log(`      - ID: ${drawing.id}`);
                console.log(`      - Description: ${drawing.description || 'N/A'}`);
                console.log(`      - Auto-generated: ${drawing.autoGenerated || false}`);
                console.log(`      - Color: ${drawing.style?.color}`);
              });
            } else if (op.clientEvent?.data?.multiple) {
              console.log(`  - Multiple Event: true`);
              console.log(`  - Drawing Count: ${op.clientEvent.data.drawings?.length || 0}`);
            } else {
              console.log(`  - Single Operation`);
            }
          });
        }
      }
      
      // Wait between tests
      await new Promise(resolve => setTimeout(resolve, 2000));
      
    } catch (error) {
      console.error(`\n❌ Error: ${error.message}`);
      if (error.stack) {
        console.error(error.stack);
      }
    }
  }
  
  console.log('\n\n✅ All tests completed!');
}

// Additional test for event flow
async function testEventFlow() {
  console.log('\n\n🔄 Testing Event Flow...');
  
  // Dynamic imports
  const fetch = (await import('node-fetch')).default;
  const EventSource = require('eventsource');
  
  // Create EventSource to monitor SSE
  const eventSource = new EventSource('http://localhost:3000/api/ui-events');
  
  let eventCount = 0;
  
  eventSource.addEventListener('ui-event', (event) => {
    const payload = JSON.parse(event.data);
    console.log(`\n📨 SSE Event received:`, payload);
    
    if (payload.event === 'draw:trendline') {
      eventCount++;
      console.log(`\n🎨 Draw Trendline Event ${eventCount}:`);
      console.log(`- Multiple: ${payload.data?.multiple || false}`);
      console.log(`- Drawing Count: ${payload.data?.drawings?.length || 1}`);
      
      if (payload.data?.multiple && payload.data?.drawings) {
        payload.data.drawings.forEach((drawing, idx) => {
          console.log(`  Drawing ${idx + 1}: ${drawing.id}`);
        });
      }
    }
  });
  
  eventSource.onerror = (error) => {
    console.error('EventSource error:', error);
  };
  
  // Send test request
  setTimeout(async () => {
    console.log('\n📤 Sending test request: "5本のトレンドラインを引いて"');
    
    try {
      const response = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: '5本のトレンドラインを引いて',
          sessionId: 'test-event-flow',
        }),
      });
      
      if (!response.ok) {
        console.error(`HTTP error! status: ${response.status}`);
        const errorText = await response.text();
        console.error(`Error details: ${errorText}`);
      } else {
        const data = await response.json();
        console.log('\n✅ Request sent successfully');
        console.log(`Response: ${data.message}`);
      }
    } catch (error) {
      console.error('Request error:', error);
    }
    
    // Wait for events
    setTimeout(() => {
      console.log(`\n📊 Total drawing events received: ${eventCount}`);
      eventSource.close();
      process.exit(0);
    }, 5000);
  }, 1000);
}

// Run tests
async function runAll() {
  try {
    await testMultipleDrawings();
    await testEventFlow();
  } catch (error) {
    console.error('Test failed:', error);
    process.exit(1);
  }
}

runAll();