#!/usr/bin/env node

/**
 * UI Events Direct Test - Monitor SSE stream for multiple drawings
 */

const { EventSource } = require('eventsource');

console.log('🚀 Starting UI Events Direct Test...\n');

// Create EventSource to monitor SSE
const eventSource = new EventSource('http://localhost:3000/api/ui-events');

let eventCount = 0;
let drawingEvents = [];

console.log('👂 Listening for UI events...\n');

eventSource.addEventListener('ui-event', (event) => {
  eventCount++;
  const payload = JSON.parse(event.data);
  
  console.log(`\n📨 Event #${eventCount}:`);
  console.log(`- Event Type: ${payload.event}`);
  console.log(`- Timestamp: ${new Date(payload.timestamp || Date.now()).toISOString()}`);
  
  if (payload.event === 'draw:trendline') {
    drawingEvents.push(payload);
    console.log(`\n🎨 Drawing Event Details:`);
    console.log(`- Multiple: ${payload.data?.multiple || false}`);
    console.log(`- Drawing Count: ${payload.data?.drawings?.length || 1}`);
    
    if (payload.data?.multiple && payload.data?.drawings) {
      console.log(`\n📋 Multiple Drawings:`);
      payload.data.drawings.forEach((drawing, idx) => {
        console.log(`\n  Drawing ${idx + 1}:`);
        console.log(`  - ID: ${drawing.id}`);
        console.log(`  - Description: ${drawing.description || 'N/A'}`);
        console.log(`  - Color: ${drawing.style?.color || 'default'}`);
        console.log(`  - Auto-generated: ${drawing.autoGenerated || false}`);
        if (drawing.points && drawing.points.length >= 2) {
          console.log(`  - Start: time=${drawing.points[0].time}, price=${drawing.points[0].price}`);
          console.log(`  - End: time=${drawing.points[1].time}, price=${drawing.points[1].price}`);
        }
      });
    }
  }
});

eventSource.onerror = (error) => {
  if (eventSource.readyState === EventSource.CLOSED) {
    console.error('\n❌ EventSource connection closed');
  } else {
    console.error('\n⚠️  EventSource error:', error);
  }
};

// Send test request after connection is established
setTimeout(async () => {
  console.log('\n\n📤 Sending test request to chat API...');
  
  const fetch = (await import('node-fetch')).default;
  
  try {
    const response = await fetch('http://localhost:3000/api/ai/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: '5本のトレンドラインを引いて',
        sessionId: 'test-ui-events',
      }),
    });
    
    if (!response.ok) {
      console.error(`\n❌ HTTP error! status: ${response.status}`);
      const errorText = await response.text();
      console.error(`Error details: ${errorText}`);
    } else {
      const data = await response.json();
      console.log('\n✅ Request sent successfully');
      console.log(`📝 Response: ${data.message}`);
    }
  } catch (error) {
    console.error('\n❌ Request error:', error);
  }
}, 1000);

// Wait for events and display summary
setTimeout(() => {
  console.log('\n\n📊 Test Summary:');
  console.log(`- Total events received: ${eventCount}`);
  console.log(`- Drawing events: ${drawingEvents.length}`);
  
  if (drawingEvents.length > 0) {
    console.log('\n🎨 Drawing Events Summary:');
    drawingEvents.forEach((event, idx) => {
      const drawingCount = event.data?.drawings?.length || 1;
      const isMultiple = event.data?.multiple || false;
      console.log(`  Event ${idx + 1}: ${isMultiple ? 'Multiple' : 'Single'} (${drawingCount} drawings)`);
    });
  }
  
  eventSource.close();
  process.exit(0);
}, 10000); // Wait 10 seconds for events