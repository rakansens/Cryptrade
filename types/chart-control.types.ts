/**
 * Type definitions for chart control tool
 */

import type { Time } from 'lightweight-charts';
import type { DrawingPoint, DrawingStyle, DrawingData } from './ui-events.types';

// ===== Chart Instance Types =====

export interface ChartInstance {
  symbol: string;
  timeframe: string;
  activeIndicators: string[];
  drawingMode: string | null;
  existingDrawings: ChartDrawing[];
  // Methods
  changeSymbol: (symbol: string) => void;
  changeTimeframe: (timeframe: string) => void;
  toggleIndicator: (indicator: string, enabled: boolean) => void;
  setDrawingMode: (mode: string | null) => void;
  addDrawing: (drawing: ChartDrawing) => void;
  removeDrawing: (id: string) => void;
  clearAllDrawings: () => void;
  fitContent: () => void;
  zoomIn: (factor?: number) => void;
  zoomOut: (factor?: number) => void;
  resetView: () => void;
}

// ===== Data Point Types =====

export interface DataPoint {
  time: Time;
  open: number;
  high: number;
  low: number;
  close: number;
  volume?: number;
}

export interface ChartDataPoint extends DrawingPoint {
  x?: number;
  y?: number;
}

// ===== Indicator Types =====

export type IndicatorType = 
  | 'MA' 
  | 'EMA' 
  | 'RSI' 
  | 'MACD' 
  | 'BollingerBands' 
  | 'Volume' 
  | 'VWAP'
  | 'StochasticRSI';

export interface Indicator {
  type: IndicatorType;
  enabled: boolean;
  settings: IndicatorSettings;
  data?: IndicatorData[];
}

export interface IndicatorSettings {
  period?: number;
  source?: 'close' | 'open' | 'high' | 'low' | 'hl2' | 'hlc3' | 'ohlc4';
  color?: string;
  lineWidth?: number;
  // MA/EMA specific
  maType?: 'simple' | 'exponential' | 'weighted';
  // MACD specific
  fastPeriod?: number;
  slowPeriod?: number;
  signalPeriod?: number;
  // Bollinger Bands specific
  standardDeviations?: number;
  // RSI specific
  overbought?: number;
  oversold?: number;
}

export interface IndicatorData {
  time: Time;
  value: number;
  // MACD specific
  macd?: number;
  signal?: number;
  histogram?: number;
  // Bollinger Bands specific
  upper?: number;
  middle?: number;
  lower?: number;
}

// ===== Chart State Types =====

export interface ChartState {
  symbol?: string;
  timeframe?: string;
  activeIndicators?: string[];
  drawingMode?: string;
  existingDrawings?: Array<{
    id: string;
    type: string;
  }>;
}

// ===== Chart Analysis Types =====

export interface ChartAnalysis {
  currentPrice: {
    price: number;
    time: Time;
    change: number;
    changePercent: number;
  };
  technicalAnalysis: {
    trend: {
      direction: 'bullish' | 'bearish' | 'neutral';
      strength: number;
    };
    momentum: {
      rsi: number;
      macd?: {
        value: number;
        signal: number;
        histogram: number;
      };
    };
    volatility: {
      value: number;
      volatilityLevel: 'low' | 'medium' | 'high';
    };
    supportResistance: {
      supports: Array<{ price: number; strength: number }>;
      resistances: Array<{ price: number; strength: number }>;
    };
  };
  recommendations: {
    trendlineDrawing: Array<{
      points: ChartDataPoint[];
      style: DrawingStyle;
      description: string;
      confidence: number;
    }>;
    analysis: string;
  };
  [key: string]: unknown;
}

// ===== Operation Types =====

export type OperationType = 
  | 'symbol_change' 
  | 'timeframe_change' 
  | 'chart_operation' 
  | 'indicator_control' 
  | 'drawing_operation' 
  | 'analysis_operation'
  | 'undo_redo'
  | 'style_update';

export interface Operation {
  type: OperationType;
  action: string;
  parameters: OperationParameters;
  priority?: number;
  description?: string;
}

export interface OperationParameters {
  // Symbol change
  symbol?: string;
  // Timeframe change
  timeframe?: string;
  // Drawing operations
  points?: ChartDataPoint[];
  startPoint?: ChartDataPoint;
  endPoint?: ChartDataPoint;
  drawingId?: string;
  drawingType?: string;
  // Style operations
  style?: Partial<DrawingStyle>;
  color?: string;
  lineWidth?: number;
  lineStyle?: 'solid' | 'dashed' | 'dotted';
  // Analysis operations
  analysisType?: string;
  config?: Record<string, unknown>;
  // Fibonacci specific
  fibonacciLevels?: number[];
  // Horizontal/Vertical specific
  price?: number;
  time?: number;
  // Zoom operations
  factor?: number;
  // Drawing mode
  mode?: string;
  // Undo/Redo
  steps?: number;
  // General
  request?: string;
  autoGenerated?: boolean;
  description?: string;
  [key: string]: unknown;
}

// ===== AI Analysis Types =====

export interface AIAnalysisResult {
  operations: Operation[];
  reasoning: string;
  confidence: number;
  complexity: 'simple' | 'moderate' | 'complex';
  userIntent: string;
}

// ===== Drawing Types =====

export interface ChartDrawing {
  id: string;
  type: string;
  points?: ChartDataPoint[];
  style?: DrawingStyle;
  metadata?: Record<string, unknown>;
}

// ===== Event Types =====

export interface ClientEvent {
  event: string;
  data: Record<string, unknown>;
}

export interface ChartOperationEvent {
  event: string;
  data: {
    symbol?: string;
    timeframe?: string;
    factor?: number;
    mode?: string;
    [key: string]: unknown;
  };
}

export interface DrawingOperationEvent {
  event: string;
  data: {
    id?: string;
    type?: string;
    points?: ChartDataPoint[];
    style?: Partial<DrawingStyle>;
    levels?: number[];
    price?: number;
    time?: number;
    autoGenerated?: boolean;
    description?: string;
    [key: string]: unknown;
  };
}

// ===== Conversation Types =====

export interface ConversationMessage {
  role: string;
  content: string;
}

// ===== Tool Response Types =====

export interface ChartControlResponse {
  success: boolean;
  operations: Array<{
    type: OperationType;
    action: string;
    parameters: OperationParameters;
    description: string;
    clientEvent?: ClientEvent;
    executionMode: 'immediate' | 'deferred';
  }>;
  response: string;
  reasoning: string;
  metadata: {
    confidence: number;
    complexity: 'simple' | 'moderate' | 'complex';
    aiEnhanced: boolean;
    chartDataUsed?: boolean;
  };
  error?: string;
}